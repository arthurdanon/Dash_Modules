// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * Rôles figés
 */
enum RoleName {
  ADMIN
  OWNER
  MANAGER
  USER
}

enum TeamName {
  HOUSEKEEPING
  MAINTENANCE
  FRONT_DESK
  SECURITY
  OTHER
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  DONE
}

model Site {
  id   String @id @default(cuid())
  name String @unique

  managers User[] @relation("SiteManagers")
  users    User[] @relation("SiteUsers")

  teams   Team[]
  options Option[]
  tasks   Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * Une équipe appartient à un site,
 * peut avoir un manager (User via relation "TeamManager"),
 * et des membres (via User.teamId).
 */
model Team {
  id     String @id @default(cuid())
  site   Site   @relation(fields: [siteId], references: [id])
  siteId String

  name TeamName

  // Manager d'équipe (optionnel)
  managerId String?
  manager   User?   @relation("TeamManager", fields: [managerId], references: [id])

  // Membres (1 équipe max par user via User.teamId)
  members User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(cuid())

  // Appartenance à un site
  site   Site?   @relation("SiteUsers", fields: [siteId], references: [id])
  siteId String?

  // Gestion d'un site (si applicable)
  managedSite   Site?   @relation("SiteManagers", fields: [managedSiteId], references: [id])
  managedSiteId String?

  // Rôle figé
  role RoleName @default(USER)

  // Appartenance à une équipe (0..1)
  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  // ⬇️ Back-relation pour le manager d'équipe (ferme "TeamManager")
  managedTeams Team[] @relation("TeamManager")

  // Identité & sécu
  firstName    String
  lastName     String
  username     String @unique
  passwordHash String

  // Stockage chiffré optionnel du mot de passe "en clair" (AES-GCM)
  passwordEnc Bytes?
  passwordIv  Bytes?
  passwordTag Bytes?

  mustChangePwd Boolean @default(true)
  isActive      Boolean @default(true)
  tokenVersion  Int     @default(0)

  // Tâches créées / assignées
  createdTasks  Task[] @relation("TaskCreator")
  assignedTasks Task[] @relation("TaskAssignee")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Option {
  id     String @id @default(cuid())
  site   Site   @relation(fields: [siteId], references: [id])
  siteId String

  key    String
  label  String
  type   String
  config Json

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id     String @id @default(cuid())
  site   Site   @relation(fields: [siteId], references: [id])
  siteId String

  title       String
  description String?
  status      TaskStatus @default(NOT_STARTED)

  // Auteur
  createdBy   User   @relation("TaskCreator", fields: [createdById], references: [id])
  createdById String

  // Affectation
  assignedTeam TeamName
  assignedTo   User?    @relation("TaskAssignee", fields: [assignedToId], references: [id])
  assignedToId String?

  options Json?

  // Rôle d'origine typé (au lieu d'un String libre)
  originRole RoleName?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  finishedAt DateTime?
}
