// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * ===================== Core tables =====================
 */

/**
 * R√¥les fixes en table (Admin, Owner, Manager, User)
 */
model CoreRole {
  id        String     @id @default(cuid())
  name      String     @unique // 'ADMIN' | 'OWNER' | 'MANAGER' | 'USER'
  isAdmin   Boolean    @default(false)
  isOwner   Boolean    @default(false)
  isManager Boolean    @default(false)
  users     CoreUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coreroles")
}

/**
 * Param√©trage global (quotas + catalogue de modules activables)
 */
model CoreSetting {
  id               String @id @default(cuid())
  name             String @unique // COMPANY_NAME
  // Quotas globaux (null = illimit√©)
  maxSites         Int?
  maxOwners        Int?
  maxManagers      Int?
  maxUsers         Int?
  // Catalogue des modules activables (ex: { stock: true })
  availableModules Json?

  sites CoreSite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coresettings")
}

/**
 * Site (appartient au CoreSetting) + modules activ√©s localement
 */
model CoreSite {
  id   String @id @default(cuid())
  name String @unique

  setting   CoreSetting @relation(fields: [settingId], references: [id])
  settingId String

  // Propri√©taire (owner) optionnel du site
  ownerId String?
  owner   CoreUser? @relation("SiteOwner", fields: [ownerId], references: [id])

  // Modules activ√©s pour CE site (ex: { stock: true })
  modules Json?

  // Back-relations
  members      CoreSiteMember[]
  teams        CoreTeam[]
  primaryUsers CoreUser[]       @relation("PrimarySite") // back-rel du site principal des users

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coresites")
}

/**
 * Utilisateur core (r√¥le global + 0..N sites via membership + 0..1 team)
 */
model CoreUser {
  id       String @id @default(cuid())
  username String @unique

  email String? @unique
  firstName String
  lastName  String

  roleId String
  role   CoreRole @relation(fields: [roleId], references: [id])

  primarySiteId String?
  primarySite   CoreSite? @relation("PrimarySite", fields: [primarySiteId], references: [id])

  ownedSites CoreSite[] @relation("SiteOwner")

  teamId String?
  team   CoreTeam? @relation(fields: [teamId], references: [id])

  managedTeams CoreTeam[] @relation("TeamManager")

  // üëá change en nullable pour permettre l‚Äôinvitation sans mot de passe
  passwordHash String?

  mustChangePwd Boolean @default(true)
  isActive      Boolean @default(true)
  tokenVersion  Int     @default(0)

  memberships CoreSiteMember[]

  // üëá back-rel vers les tokens d‚Äôauth
  authTokens CoreAuthToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coreusers")
}

// üëá Types de token pour invitation / reset
enum CoreAuthTokenType {
  INVITE
  RESET
}

// üëá Table de tokens (single-use, expirables)
model CoreAuthToken {
  id        String            @id @default(cuid())
  type      CoreAuthTokenType
  userId    String
  user      CoreUser          @relation(fields: [userId], references: [id])
  tokenHash String            @unique
  expiresAt DateTime
  usedAt    DateTime?
  meta      Json?

  createdAt DateTime @default(now())

  @@index([userId, type])
  @@map("coreauthtokens")
}

/**
 * Membership user‚Üîsite (acc√®s) + flag manager au niveau du site
 */
model CoreSiteMember {
  id String @id @default(cuid())

  siteId String
  site   CoreSite @relation(fields: [siteId], references: [id])

  userId String
  user   CoreUser @relation(fields: [userId], references: [id])

  // Si ce user est ‚Äúmanager du site‚Äù
  isManager Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([siteId, userId])
  @@map("coresitemembers")
}

/**
 * √âquipe appartenant √† un site
 * - managerId optionnel (le ‚Äúmanager officiel‚Äù de l‚Äô√©quipe)
 * - membres = users avec user.teamId = cette √©quipe
 */
model CoreTeam {
  id     String   @id @default(cuid())
  siteId String
  site   CoreSite @relation(fields: [siteId], references: [id])

  name String

  managerId String?
  manager   CoreUser? @relation("TeamManager", fields: [managerId], references: [id])

  members CoreUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([siteId, name])
  @@map("coreteams")
}
